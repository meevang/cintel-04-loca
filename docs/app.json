[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom shiny import reactive\n\n# Load penguins dataset\npenguins = load_penguins()\n\nui.page_opts(title=\"Mee's Layout\", fillable=True)\n\n# Create a single sidebar\nwith ui.sidebar(open=\"open\", bg=\"#f8f8f8\"):\n    # Add a 2nd level header to the sidebar\n    ui.h2(\"Sidebar\")\n\n    # Create a dropdown input to choose a column\n    ui.input_select(\n    \"histogram_attribute\",\n    label=\"Select attribute for Ploytly Histogram\",\n    choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    selected=\"body_mass_g\"\n)\n    \n    ui.input_numeric(\"plotly_bin_count\", \"Input number for Plotly Histogram\", min=0, max=30, value=0)\n    \n    ui.input_slider(\"seaborn_bin_count\", \"Bin Count for Seaborn Hisogram\", min=0, max=20, value=10)\n    \n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Species:\", \n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=True)\n    # Use ui.a() to add a hyperlink to the sidebar\n    ui.a(\"GitHub\", href=\"https://github.com/meevang/cintel-02-data\", target=\"_blank\")\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr(style=\"border-top: 10px dashed #38761d;\")\n\n\nwith ui.layout_columns():\n    # First column: Data Table\n    with ui.card():\n        ui.card_header(\"Penguins Data Table\")\n        @render.data_frame\n        def penguins_datatable():\n            return render.DataTable(data=filtered_data(), filters=False, height='400px')\n    \n    # Second column: Data Grid\n    with ui.card():\n        ui.card_header(\"Penguins Data Grid\")\n        @render.data_frame\n        def penguins_datagrid():\n            return render.DataGrid(data=filtered_data(), filters=False, width='100%', height='400px')\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram: Species\")\n        \n        @render_plotly\n        def plotly_histogram():\n            filtered_df = penguins[penguins['species'].isin(input.selected_species_list())]\n            x_attr = input.histogram_attribute()\n    \n            return px.histogram(filtered_df, \n                        x=x_attr,\n                        color=\"species\", \n                        title=f\"Penguin {x_attr} by Species\",\n                        labels={x_attr: x_attr, \"count\": \"Count\"},\n                        nbins=input.plotly_bin_count(),\n                        marginal=\"box\")\n            \n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram: Species\")\n    \n        @render.plot\n        def seaborn_histogram():\n            filtered_df=penguins[penguins['species'].isin(input.selected_species_list())]\n            fig, ax = plt.subplots(figsize=(10, 6))\n            sns.histplot(filtered_df, x=\"body_mass_g\", hue=\"species\", multiple=\"stack\", ax=ax, bins=input.seaborn_bin_count())\n            ax.set_title(\"Penguin Body Mass by Species\")\n            ax.set_xlabel(\"Body Mass (g)\")\n            ax.set_ylabel(\"Count\")\n            return fig\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot: Penguin Flipper & Bill Length\")\n\n    @render_plotly\n    def plotly_scatterplot():\n        filtered_df=penguins[penguins['species'].isin(input.selected_species_list())]\n        fig = px.scatter(filtered_df, \n                     x=\"flipper_length_mm\", \n                     y=\"bill_length_mm\", \n                     color=\"species\",\n                     labels={\"flipper_length_mm\": \"Flipper Length (mm)\",\n                             \"bill_length_mm\": \"Bill Length (mm)\",\n                             \"species\": \"Species\"})\n        return fig\n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    return penguins[penguins[\"species\"].isin(selected_species)]\n", "type": "text"}]